<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>CSP Bypass Demonstration</title>
    <!-- Example of a weak CSP policy -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self';">
    
    <style>
        h1, h2, h3 {
            color: #4682b4;
        }
        *{
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>CSP Bypass Demonstration</h1>

    <h2>Meta Tag Injection</h2>
    <p>This example injects a new meta tag to bypass CSP.</p>
    <script>
        var meta = document.createElement('meta');
        meta.httpEquiv = 'Content-Security-Policy';
        meta.content = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self';";
        document.getElementsByTagName('head')[0].appendChild(meta);

        // now injecting a script that violates the original CSP
        var script = document.createElement('script');
        script.innerHTML = "alert('Meta Tag Injection CSP Bypass')";
        document.body.appendChild(script);
    </script>

    <h2>Inline Script Injection</h2>
    <p>This example uses inline scripts which are allowed due to 'unsafe-inline'.</p>
    <script>
        alert('Inline Script Injection CSP Bypass');
    </script>

    <h2>Self Injection</h2>
    <p>This example injects a script from the same origin, allowed by 'self'.</p>
    <script src="/external-eval-script.js"></script>

    <h2>CSS Injection</h2>
    <p>This example uses inline styles which are allowed due to 'unsafe-inline'.</p>
    <div id="cssInjection" style="width: 100px; height: 100px; background-color: red;"></div>
    <script>
        var div = document.getElementById('cssInjection');
        div.style.backgroundColor = 'blue';
        alert('CSS Injection CSP Bypass');
    </script>

    <h2>Using Known Vulnerable Libraries</h2>
    <p>This example demonstrates a CSP bypass using a vulnerable version of jQuery.</p>
    <script src="http://localhost/codtech/csp/external-eval-script.js"></script>
    <!-- <script>
        $.getScript('/external-eval-script.js');
    </script> -->

    <h2>Unsafe-Eval Injection</h2>
    <p>This example uses eval which is allowed due to 'unsafe-eval'.</p>
    <script>
        eval("alert('Unsafe-Eval CSP Bypass')");
    </script>

</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>CSP Tester</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
        }
        .csp-directive {
            margin: 10px;
        }
        #result {
            margin-top: 20px;
        }
        h1{
            color: #4682b4;
            text-align: center;
        }
        button{
            background-color: #4682b4;
            border: 1px solid #4682b4;
            border-radius: 0 4px 4px 0;
            padding: 10px;
            cursor: pointer;
            color: #fff;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <h1>CSP Tester</h1>

    <!-- checkboxes for CSP Directives -->
    <div class="csp-directive">
        <label><input type="checkbox" id="unsafe-inline"> 'unsafe-inline'</label>
    </div>
    <div class="csp-directive">
        <label><input type="checkbox" id="unsafe-eval"> 'unsafe-eval'</label>
    </div>

    <!-- btn to apply CSP -->
    <button onclick="applyCSP()">Apply CSP Policy</button>

    <!-- btns to test diff injections -->
    <div class="csp-directive">
        <button onclick="testInlineScript()">Test Inline Script Injection</button>
        <button onclick="testEval()">Test Eval Injection (Inline)</button>
        <button onclick="testFunctionConstructor()">Test Function Constructor Injection</button>
        <button onclick="testCSSInjection()">Test CSS Injection</button>
        <button onclick="testExternalEval()">Test Eval Injection (External)</button>
        <hr>
        <a href="http://localhost/codtech/csp/hardcoded.php">Checkout the hardcoded version to see the errors in console</a>
    </div>

    <!-- display results -->
    <div id="result"></div>

    <script>
        function applyCSP() {
            // remove existing CSP meta tags
            const existingMeta = document.querySelector('meta[http-equiv="Content-Security-Policy"]');  // meta injection vulnerability as script-src "self" is allowed
            if (existingMeta) {
                existingMeta.remove();
            }

            // get the selected CSP directives
            const unsafeInline = document.getElementById('unsafe-inline').checked ? "'unsafe-inline'" : "";
            const unsafeEval = document.getElementById('unsafe-eval').checked ? "'unsafe-eval'" : "";

            // construct the CSP policy
            let cspPolicy = "default-src 'self'; script-src 'self'"; //safest
            if (unsafeInline) cspPolicy += ` ${unsafeInline}`; // unsafe-inline is added in above
            if (unsafeEval) cspPolicy += ` ${unsafeEval}`;// unsafe-eval is appended as well
            
            // cspPolicy += " http://localhost/codtechcsp/external-eval-script.js";  // Add your external script source here

            cspPolicy += "; style-src 'self'";

            // apply the CSP policy
            const meta = document.createElement('meta');
            meta.httpEquiv = 'Content-Security-Policy';
            meta.content = cspPolicy;
            document.getElementsByTagName('head')[0].appendChild(meta);

            alert(`Applied CSP Policy: ${meta.content}`);
        }

        function retrieveCookies() {
            return document.cookie;
        }

        function testInlineScript() {
            const script = document.createElement('script');
            script.innerHTML = `
                alert('Inline Script Injection CSP Bypass');
                console.log('Cookies stolen from inline: ' + retrieveCookies());
            `;
            document.getElementById('result').innerHTML = '';
            document.getElementById('result').appendChild(script);
        }

        function testEval() {
            if (document.querySelector('meta[http-equiv="Content-Security-Policy"]').content.includes("'unsafe-eval'")) {
                try {
                    eval(`
                        alert('Eval Injection CSP Bypass');
                        console.log('Cookies stolen from eval inj: ' + retrieveCookies());
                    `);
                } catch (e) {
                    alert('Eval Injection Blocked');
                }
            } else {
                alert('Eval Injection Not Allowed');
            }
        }

        function testFunctionConstructor() {
            if (document.querySelector('meta[http-equiv="Content-Security-Policy"]').content.includes("'unsafe-eval'")) {
                try {
                    var func = new Function(`
                        alert('Function Constructor Injection CSP Bypass');
                        console.log('Cookies from function constructor inj: ' + retrieveCookies());
                    `);
                    func();
                } catch (e) {
                    alert('Function Constructor Injection Blocked');
                }
            } else {
                alert('Function Constructor Injection Not Allowed');
            }
        }

        function testCSSInjection() {
            const div = document.createElement('div');
            document.getElementById('result').innerHTML = '';
            document.getElementById('result').appendChild(div);
            try {
                document.body.style.backgroundColor = 'blue';
                alert('CSS Injection CSP Bypass');
                console.log('Cookies stolen from CSS bypass: ' + retrieveCookies());
            } catch (e) {
                alert('CSS Injection Blocked');
            }
        }

        function testExternalEval() {
            const script = document.createElement('script');
            script.src = 'external-eval-script.js'; // ext script file
            document.getElementById('result').innerHTML = '';
            document.getElementById('result').appendChild(script);
        }
    </script>
</body>
</html>

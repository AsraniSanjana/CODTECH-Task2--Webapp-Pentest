<?php
// db connection
$servername = "localhost";
$username = "root";
$password = "";
$database = "user_registration";

$conn = mysqli_connect($servername, $username, $password, $database);

if (!$conn) { // if unsuccessful, die
    die("Sorry, we failed to connect: " . mysqli_connect_error());
}

class User {
    public $username;
    public $password;

    function __construct($username, $password) {
        $this->username = $username;
        $this->password = $password;
    }
}

function serializeUser($username, $password) {
    $user = new User($username, $password);
    return serialize($user);
}

function deserializeUser($serializedData) {
    $user = unserialize($serializedData);
    return $user;
}

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $username = $_POST['username'] ?? '';
    $password = $_POST['password'] ?? '';
    $serializedInput = $_POST['serialized_input'] ?? '';

    // serialize user input
    if (isset($_POST['serialize'])) {
        $serializedUser = serializeUser($username, $password);
    }

    // deserialize and compare with database
    if (!empty($serializedInput)) {
        $user = deserializeUser($serializedInput);
        $deserializedUsername = $user->username;
        $deserializedPassword = $user->password;

        // check the deserialized credentials against the database i.e. if theyre valid
        $stmt = $conn->prepare("SELECT * FROM login WHERE username = ? AND password = ?");
        $stmt->bind_param("ss", $deserializedUsername, $deserializedPassword);
        $stmt->execute();
        $result = $stmt->get_result();
        $isValid = $result->num_rows > 0;
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Serialization Demo</title>
    <style>
        h1, h2 {
            color: #4682b4;
            text-align: center;
        }
        button, input[type="submit"] {
            background-color: #4682b4;
            border: 1px solid #4682b4;
            border-radius: 0 4px 4px 0;
            padding: 10px;
            cursor: pointer;
            color: #fff;
            font-size: 16px;
        }
        .output {
            background-color: black;
            color: yellow;
            padding: 5px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <h1>Serialization and Deserialization Demo</h1>

    <!-- form for serializing and deserializing -->
    <form method="post">
        <h2>Serialize User Data</h2>
        Username: <input type="text" name="username"><br><br>
        Password: <input type="text" name="password"><br><br>
        <input type="submit" name="serialize" value="Serialize"><br><br>
        <hr>
        Serialized Input:<br>
        <textarea name="serialized_input" rows="5" cols="50"><?php echo isset($serializedUser) ? htmlspecialchars($serializedUser) : ''; ?></textarea><br><br>
        <input type="submit" value="Deserialize"><br><br>
        <hr>
        Deserialized Username: <span class="output"><?php echo isset($deserializedUsername) ? htmlspecialchars($deserializedUsername) : ''; ?></span><br><br>
        Deserialized Password: <span class="output"><?php echo isset($deserializedPassword) ? htmlspecialchars($deserializedPassword) : ''; ?></span><br><br>
        <?php if (isset($isValid) && $isValid): ?>
            <p><strong>The deserialized user credentials are valid.</strong></p>
        <?php elseif (isset($isValid)): ?>
            <p><strong>The deserialized user credentials are invalid.</strong></p>
        <?php endif; ?>
    </form>

    <hr>
    <p><strong>Note:</strong> We never serialize sensitive data such as passwords in real applications. This demonstration is for educational purposes only.</p>
</body>
</html>

<?php
$servername = "localhost";
$username = "root";
$password = "";
$database = "user_registration";

$conn = mysqli_connect($servername, $username, $password, $database);

if (!$conn) {
    die("Sorry, we failed to connect: " . mysqli_connect_error());
}

// get username from URL param
$requested_user = isset($_GET['user']) ? mysqli_real_escape_string($conn, $_GET['user']) : '';

// initialize authorization status
$authorized = false;

// check if the username is registered against db
if ($requested_user) {
    $check_user_query = "SELECT * FROM login WHERE username='$requested_user'";
    $check_result = mysqli_query($conn, $check_user_query);

    if ($check_result && mysqli_num_rows($check_result) > 0) {
        $authorized = true;
    }
}

// handle form submissions for change username and pswd (this was done when pswd were not hashed for deilberate vuln)
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['change-username'])) {
        $new_username = $_POST['new-username'];
        $current_password = $_POST['current-password'];

        // Validate current password
        $sql = "SELECT password FROM login WHERE username = '$requested_user'";
        $result = mysqli_query($conn, $sql);
        $row = mysqli_fetch_assoc($result);

        if ($row && $row['password'] == $current_password) { // Vulnerable to plain-text password check
            // update username
            $update_sql = "UPDATE login SET username = '$new_username' WHERE username = '$requested_user'";
            if (mysqli_query($conn, $update_sql)) {
                echo "<p>Username changed successfully.</p>";
                $requested_user = $new_username; // Update requested_user for the current session
            } else {
                echo "<p>Error changing username: " . mysqli_error($conn) . "</p>";
            }
        } else {
            echo "<p>Failed to change Username. Current password is incorrect.</p>";
        }
    }

    if (isset($_POST['change-password'])) {
        $new_password = $_POST['new-password'];
        $current_password = $_POST['current-password'];

        // validate current password
        //compares plain text (entered as input) with hashed pswd in db, thus never same. 
        $sql = "SELECT password FROM login WHERE username = '$requested_user'";
        $result = mysqli_query($conn, $sql);
        $row = mysqli_fetch_assoc($result);

        if ($row && $row['password'] == $current_password) { // Vulnerable to plain-text password check
            // update password
            $update_sql = "UPDATE login SET password = '$new_password' WHERE username = '$requested_user'";
            if (mysqli_query($conn, $update_sql)) {
                echo "<p>Password changed successfully.</p>";
            } else {
                echo "<p>Error changing password: " . mysqli_error($conn) . "</p>";
            }
        } else {
            echo "<p>Current password is incorrect.</p>";
        }
    }
}

mysqli_close($conn);
?>

<!DOCTYPE html>
<html>
<head>
    <title>User Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f8ff;
            color: #333;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        h1, h3 {
            color: #4682b4;
            text-align: center;
        }
        form {
            margin-bottom: 20px;
        }
        .search-form, .change-form {
            display: flex;
            align-items: center;
        }
        .search-form {
            margin-bottom: 10px;
        }
        .search-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px 0 0 4px;
            font-size: 16px;
        }
        .search-button{
            background-color: #4682b4;
            border: 1px solid #4682b4;
            border-radius: 0 4px 4px 0;
            padding: 10px;
            cursor: pointer;
            color: #fff;
            font-size: 16px;
            display: flex;
            align-items: center;
        }

        .search-button i {
            margin: 0;
        }
        
        button{
            background-color: #4682b4;
            border: 1px solid #4682b4;
            border-radius: 0 4px 4px 0;
            padding: 10px;
            cursor: pointer;
            color: #fff;
            font-size: 16px;
        }
        .change-form input {
            margin: 5px;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .change-form button {
            padding: 10px;
            border: none;
            background-color: #4682b4;
            color: #fff;
            cursor: pointer;
            border-radius: 4px;
        }
        .hidden {
            display: none;
        }
        hr{
            width: 100vw; 
            height: 2px; 
            background-color: grey; 
            border: none; 
            margin: 0;
        }
        .cors-btn-container {
            display: flex;
            justify-content: center;
            gap: 10px; /* Space between buttons */
        }
        
    </style>

<!-- js for the search functi -->
    <script>
    function search(e) {
        e.preventDefault(); // Prevent the form from submitting in the traditional way
        let searched = document.getElementById("query-input").value.trim();
        if (searched !== "") {
            let text = document.getElementById("text").innerHTML;
            let re = new RegExp(searched, "g"); // search for all instances
            let newText = text.replace(re, `<mark>${searched}</mark>`);
            document.getElementById("text").innerHTML = newText;
        }
    }

    document.addEventListener('DOMContentLoaded', (event) => {
        document.querySelector('.search-form').addEventListener('submit', search);
    });
    </script>

    <script>
        
        function getQueryParam(param) {
            let urlParams = new URLSearchParams(window.location.search);
            return urlParams.get(param);
        }

        function updateUrlWithParams(userParam) {
            let urlParams = new URLSearchParams(window.location.search);
            urlParams.set('user', userParam);
            window.history.replaceState({}, '', `${window.location.pathname}?${urlParams.toString()}`);
        }

        document.addEventListener('DOMContentLoaded', (event) => {
            var query = getQueryParam('query');
            var username = getQueryParam('user');

            // ensure 'user' parameter is present in the URL
            if (username) {
                // update URL to include 'user' if not present
                updateUrlWithParams(username);
            }

            // get authorization status from PHP else no content visible
            var isAuthorized = <?php echo json_encode($authorized); ?>;

            if (isAuthorized) {
                document.getElementById('user-greeting').innerText = `Hello ${username}!`;
                document.getElementById('search-form').classList.remove('hidden');
                document.getElementById('query-section').classList.remove('hidden');
                document.getElementById('change-forms').classList.remove('hidden');
                document.getElementById('query-output').innerHTML = query; // JSI vulnerability
                document.getElementById('feedback-form').classList.remove('hidden');
                // document.getElementById('jwt-management').classList.remove('hidden');
                document.getElementById('file-upload').classList.remove('hidden');  
                document.getElementById('contact-us').classList.remove('hidden');  
                document.getElementById('cors').classList.remove('hidden');  
                document.getElementById('csp-bypass').classList.remove('hidden');  
                document.getElementById('api-hhi').classList.remove('hidden');  
                document.getElementById('serialization').classList.remove('hidden');  
                document.getElementById('xss').classList.remove('hidden');  
                document.getElementById('x-vuln').classList.remove('hidden'); 

            } else {
                document.getElementById('user-greeting').innerText = 'Unauthorized';
                document.getElementById('search-form').classList.add('hidden');
                document.getElementById('query-section').classList.add('hidden');
                document.getElementById('change-forms').classList.add('hidden');
                document.getElementById('feedback-form').classList.add('hidden');
                // document.getElementById('jwt-management').classList.add('hidden');
                document.getElementById('file-upload').classList.add('hidden'); 
                document.getElementById('contact-us').classList.add('hidden');   
                document.getElementById('cors').classList.add('hidden');  
                document.getElementById('csp-bypass').classList.add('hidden');  
                document.getElementById('api-hhi').classList.add('hidden'); 
                document.getElementById('serialization').classList.add('hidden'); 
                document.getElementById('xss').classList.add('hidden');
                document.getElementById('x-vuln').classList.add('hidden');
                
            }

            // handle form submission here
            document.querySelector('.search-form').addEventListener('submit', function(event) {
                event.preventDefault();
                var queryValue = document.getElementById('query-input').value;
                var newUrl = new URL(window.location.href);
                newUrl.searchParams.set('query', queryValue);
                window.location.href = newUrl.toString();
            });
        });
    </script>

        <!-- this script is for the hidden field username carryfwd from dashboard to feedback.php -->
        <script>
    document.addEventListener('DOMContentLoaded', (event) => {
        var urlParams = new URLSearchParams(window.location.search);
        var username = urlParams.get('user');
        if (username) {
            document.getElementById('hidden-username').value = username;
        }
    });
</script>

</head>
<body>
    <h3 id="user-greeting">Loading...</h3>
    <form id="search-form" class="search-form hidden" autocomplete="off" onsubmit="search(event)">
        <input class="search-input" id="query-input" type="text" name="query" placeholder="Search here..." />
        <button class="search-button" type="submit" role="button">
            <i class="fas fa-search"></i>
        </button>
    </form>

    <div id="query-section" class="hidden">
        <h3 class="search-query">You Queried: <span id="query-output" class="query"></span></h3>
        <hr>
    </div>


    <!-- csp bypass demo -->
    <form action="../csp/csp-bypass.php" id="csp-bypass" class="csp-bypass" autocomplete="off">
        <center>
            <hr style="visibility: hidden; margin: 10px 0;">
            <button class="csp-bypass" type="submit" role="button">CSP Bypass demo</button>
            <hr style="visibility: hidden; margin: 10px 0;">
            <hr>
        </center>
    </form>

    <!-- data parsing vul demo -->
    <form action="../vulnerabilities.php" id="x-vuln" class="x-vuln" autocomplete="off">
        <center>
            <button class="csp-bypass" type="submit" role="button">Data Parsing vuln demo</button>
            <hr style="visibility: hidden; margin: 10px 0;">
            <hr>
        </center>
    </form>


    <!-- xss demo-->
    <form action="../xss.php" id="xss" class="xss" autocomplete="off">
        <center>
            <button class="xss" type="submit" role="button">3 Types of XSS demo</button>
            
        </center>
    </form>



    <!-- serialization demo -->
    <form action="../serialization.php" id="serialization" class="serialization" autocomplete="off">
        <center>
            <hr>
        <hr style="visibility: hidden; margin: 10px 0;">
        
            <button class="serialization" type="submit" role="button">serialization demo</button>
        </center>
    </form>


    <!-- change username and pswd forms -->
    <div id="change-forms" class="hidden">
        <hr>
        <h3 id="text">Change Account Settings</h3>
        <form id="change-username-form" class="change-form" method="post" autocomplete="off" style="justify-content:center;">
            <!-- <label for="new-username">New Username:</label> -->
       
            <input type="text" id="new-username" name="new-username" placeholder="New Username" required />
            <input type="password" name="current-password" placeholder="Current Password" required />
            <button type="submit" name="change-username">Change Username</button>
       
        </form>

        <form id="change-password-form" class="change-form" method="post" autocomplete="off" style="justify-content:center;">
            <!-- <label for="new-password">New Password:</label> -->
            <input type="password" id="new-password" name="new-password" placeholder="New Password"required />
            <input type="password" id="current-password" name="current-password" placeholder="Current Password" required />
            <button type="submit" name="change-password">Change Password</button>
        </form>
    </div>

    <div id="file-upload" class="hidden">
        <hr>
        <h3 id="text">DFMS - Digital File Management System</h3>
        <center>
        <form action="upload.php" method="post" enctype="multipart/form-data">
        <label for="file-upload">Choose file to upload:</label>
        <input type="file" id="file-upload" name="uploaded_file">
        <button type="submit">Upload File</button>
        </form>
        </center>
    </div>

    <!-- <div id="jwt-management" class="hidden">
        <hr>
        <h3 id="text">JWT management</h3>
    </div> -->

    <div id="feedback-form" class="hidden">
        <hr>
        <h3 id="text">Feedback Form</h3>
        <form method="post" action="../csrf/feedback.php" id="feedback-form-container" style="text-align:center;">
            <!-- <input type="hidden" name="username" id="hidden-username"> -->
            <input type="hidden" name="username" value="<?php echo htmlspecialchars($requested_user); ?>" />
            <textarea style="justify-content:center;" name="feedback" rows="4" cols="50" placeholder=" Enter your feedback here..."></textarea>
            <br>
            <button type="submit" name="submit-feedback">Submit Feedback</button>
        </form>
    </div>


    <div id="cors" class="hidden">
    <hr>
    <h3 id="text">Test CORS</h3>
    <center>
    <h2 id="text">SERVER IS RUNNING ON PORT: 8000 &
    CLIENT IS RUNNING ON PORT: 8001 </h2>
    </center>
    <div class="cors-btn-container">
    <button onclick="window.location.href='http://127.0.0.1:5500/cors/cors-client/index.html'">Send request from port 5500 (Live Server)</button>
    <button onclick="window.location.href='http://localhost:8000/index.html'">Send request from localhost port 8000 (never possible since 8000 is for server)</button>
    <button  style="align-items:center;" onclick="window.location.href='http://localhost:8001/index.html'">Send request from localhost port 8001</button>
    </div>
    <hr style="visibility: hidden; margin: 10px 0;">
    </div>

<!-- contact form for email header injection vuln-->
    <div id="contact-us">
        <hr>
        <h3>Contact Form</h3>
        <form action="../email/send_emails.php" method="post" style="text-align:center;">
            Your Email id: <input type="text" name="recp-email"><br>
            <hr style="visibility: hidden; margin: 10px 0;">
            Subject of the mail:  <input type="text" name="subject"><br>
            <hr style="visibility: hidden; margin: 10px 0;">
            Message: <textarea name="message" rows="5" cols="40"></textarea><br>
            <button type="submit" name="send" id="contact-submit">Send Mail</button>
        </form>
        <hr>
    </div>


<!-- host header injection demo -->
<form action="../api/api_vulnerable.php" id="api-hhi" autocomplete="off">
        <center>
            <hr style="visibility: hidden; margin: 10px 0;">
            <button  type="submit" role="button">API HHI demo</button>
            <hr style="visibility: hidden; margin: 10px 0;">
        </center>
    </form>
    </body>